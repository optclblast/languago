// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: q_pg.sql

package postgresql

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addToDeck = `-- name: AddToDeck :exec
INSERT INTO flashcard_decks
    (deck_id, flashcard_id)
    VALUES
    ($1, $2)
`

type AddToDeckParams struct {
	DeckID      uuid.NullUUID `db:"deck_id" json:"deck_id"`
	FlashcardID uuid.NullUUID `db:"flashcard_id" json:"flashcard_id"`
}

func (q *Queries) AddToDeck(ctx context.Context, arg AddToDeckParams) error {
	_, err := q.db.ExecContext(ctx, addToDeck, arg.DeckID, arg.FlashcardID)
	return err
}

const createDeck = `-- name: CreateDeck :one
INSERT INTO decks 
    (id, name, owner)
    VALUES
    ($1, $2, $3)
    RETURNING name, owner
`

type CreateDeckParams struct {
	ID    uuid.UUID      `db:"id" json:"id"`
	Name  sql.NullString `db:"name" json:"name"`
	Owner uuid.NullUUID  `db:"owner" json:"owner"`
}

type CreateDeckRow struct {
	Name  sql.NullString `db:"name" json:"name"`
	Owner uuid.NullUUID  `db:"owner" json:"owner"`
}

// Decks
func (q *Queries) CreateDeck(ctx context.Context, arg CreateDeckParams) (CreateDeckRow, error) {
	row := q.db.QueryRowContext(ctx, createDeck, arg.ID, arg.Name, arg.Owner)
	var i CreateDeckRow
	err := row.Scan(&i.Name, &i.Owner)
	return i, err
}

const createFlashcard = `-- name: CreateFlashcard :one
INSERT INTO flashcards
    (id, word, meaning, usage)
    VALUES
    ($1, $2, $3, $4)
    RETURNING word, meaning, usage
`

type CreateFlashcardParams struct {
	ID      uuid.UUID      `db:"id" json:"id"`
	Word    sql.NullString `db:"word" json:"word"`
	Meaning sql.NullString `db:"meaning" json:"meaning"`
	Usage   []string       `db:"usage" json:"usage"`
}

type CreateFlashcardRow struct {
	Word    sql.NullString `db:"word" json:"word"`
	Meaning sql.NullString `db:"meaning" json:"meaning"`
	Usage   []string       `db:"usage" json:"usage"`
}

// Flashcards
func (q *Queries) CreateFlashcard(ctx context.Context, arg CreateFlashcardParams) (CreateFlashcardRow, error) {
	row := q.db.QueryRowContext(ctx, createFlashcard,
		arg.ID,
		arg.Word,
		arg.Meaning,
		pq.Array(arg.Usage),
	)
	var i CreateFlashcardRow
	err := row.Scan(&i.Word, &i.Meaning, pq.Array(&i.Usage))
	return i, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users 
    (id, login, password) 
    VALUES 
    ($1, $2, $3)
`

type CreateUserParams struct {
	ID       uuid.UUID      `db:"id" json:"id"`
	Login    sql.NullString `db:"login" json:"login"`
	Password sql.NullString `db:"password" json:"password"`
}

// User
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.ID, arg.Login, arg.Password)
	return err
}

const deleteDeck = `-- name: DeleteDeck :exec
DELETE FROM decks
    WHERE id = $1
`

func (q *Queries) DeleteDeck(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDeck, id)
	return err
}

const deleteFlashcard = `-- name: DeleteFlashcard :exec
DELETE FROM flashcards 
    WHERE id = $1
`

func (q *Queries) DeleteFlashcard(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFlashcard, id)
	return err
}

const deleteFromDeck = `-- name: DeleteFromDeck :exec
DELETE FROM flashcard_decks
    WHERE flashcard_id = $1 AND
        deck_id = $2
`

type DeleteFromDeckParams struct {
	FlashcardID uuid.NullUUID `db:"flashcard_id" json:"flashcard_id"`
	DeckID      uuid.NullUUID `db:"deck_id" json:"deck_id"`
}

func (q *Queries) DeleteFromDeck(ctx context.Context, arg DeleteFromDeckParams) error {
	_, err := q.db.ExecContext(ctx, deleteFromDeck, arg.FlashcardID, arg.DeckID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users 
    WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const editDeckProps = `-- name: EditDeckProps :exec
UPDATE decks SET
    name = $1
    WHERE id = $2
`

type EditDeckPropsParams struct {
	Name sql.NullString `db:"name" json:"name"`
	ID   uuid.UUID      `db:"id" json:"id"`
}

func (q *Queries) EditDeckProps(ctx context.Context, arg EditDeckPropsParams) error {
	_, err := q.db.ExecContext(ctx, editDeckProps, arg.Name, arg.ID)
	return err
}

const selectDeck = `-- name: SelectDeck :one
SELECT id, name, owner FROM decks 
    WHERE id = $1
`

func (q *Queries) SelectDeck(ctx context.Context, id uuid.UUID) (Deck, error) {
	row := q.db.QueryRowContext(ctx, selectDeck, id)
	var i Deck
	err := row.Scan(&i.ID, &i.Name, &i.Owner)
	return i, err
}

const selectDecksByName = `-- name: SelectDecksByName :many
SELECT id, name, owner FROM decks
    WHERE name = $1
`

func (q *Queries) SelectDecksByName(ctx context.Context, name sql.NullString) ([]Deck, error) {
	rows, err := q.db.QueryContext(ctx, selectDecksByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deck
	for rows.Next() {
		var i Deck
		if err := rows.Scan(&i.ID, &i.Name, &i.Owner); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectFlashcards = `-- name: SelectFlashcards :many
SELECT id, word, meaning, usage FROM flashcards 
    WHERE id = $1 AND word = $2 AND meaning = $3 AND usage = $4
`

type SelectFlashcardsParams struct {
	ID      uuid.UUID      `db:"id" json:"id"`
	Word    sql.NullString `db:"word" json:"word"`
	Meaning sql.NullString `db:"meaning" json:"meaning"`
	Usage   []string       `db:"usage" json:"usage"`
}

func (q *Queries) SelectFlashcards(ctx context.Context, arg SelectFlashcardsParams) ([]Flashcard, error) {
	rows, err := q.db.QueryContext(ctx, selectFlashcards,
		arg.ID,
		arg.Word,
		arg.Meaning,
		pq.Array(arg.Usage),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flashcard
	for rows.Next() {
		var i Flashcard
		if err := rows.Scan(
			&i.ID,
			&i.Word,
			&i.Meaning,
			pq.Array(&i.Usage),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectOwnerDecks = `-- name: SelectOwnerDecks :many
SELECT id, name, owner FROM decks
    WHERE owner = $1
`

func (q *Queries) SelectOwnerDecks(ctx context.Context, owner uuid.NullUUID) ([]Deck, error) {
	rows, err := q.db.QueryContext(ctx, selectOwnerDecks, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deck
	for rows.Next() {
		var i Deck
		if err := rows.Scan(&i.ID, &i.Name, &i.Owner); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUser = `-- name: SelectUser :exec
SELECT id, login, password FROM users 
    WHERE id = $1 AND login = $2
`

type SelectUserParams struct {
	ID    uuid.UUID      `db:"id" json:"id"`
	Login sql.NullString `db:"login" json:"login"`
}

func (q *Queries) SelectUser(ctx context.Context, arg SelectUserParams) error {
	_, err := q.db.ExecContext(ctx, selectUser, arg.ID, arg.Login)
	return err
}

const updateFlashcard = `-- name: UpdateFlashcard :exec
UPDATE flashcards SET
    id = $1,
    word = $2,
    meaning = $3,
    usage = $4
    WHERE id = $5
`

type UpdateFlashcardParams struct {
	ID      uuid.UUID      `db:"id" json:"id"`
	Word    sql.NullString `db:"word" json:"word"`
	Meaning sql.NullString `db:"meaning" json:"meaning"`
	Usage   []string       `db:"usage" json:"usage"`
	ID_2    uuid.UUID      `db:"id_2" json:"id_2"`
}

func (q *Queries) UpdateFlashcard(ctx context.Context, arg UpdateFlashcardParams) error {
	_, err := q.db.ExecContext(ctx, updateFlashcard,
		arg.ID,
		arg.Word,
		arg.Meaning,
		pq.Array(arg.Usage),
		arg.ID_2,
	)
	return err
}

const updateUserLogin = `-- name: UpdateUserLogin :one
UPDATE users SET login = $1
    WHERE id = $2
    RETURNING id, login
`

type UpdateUserLoginParams struct {
	Login sql.NullString `db:"login" json:"login"`
	ID    uuid.UUID      `db:"id" json:"id"`
}

type UpdateUserLoginRow struct {
	ID    uuid.UUID      `db:"id" json:"id"`
	Login sql.NullString `db:"login" json:"login"`
}

func (q *Queries) UpdateUserLogin(ctx context.Context, arg UpdateUserLoginParams) (UpdateUserLoginRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserLogin, arg.Login, arg.ID)
	var i UpdateUserLoginRow
	err := row.Scan(&i.ID, &i.Login)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET password = $1
    WHERE id = $2
`

type UpdateUserPasswordParams struct {
	Password sql.NullString `db:"password" json:"password"`
	ID       uuid.UUID      `db:"id" json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.Password, arg.ID)
	return err
}
